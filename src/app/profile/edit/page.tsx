"use client";

import React, { useState, useEffect } from "react"; // üí° Import useEffect
import { useRouter } from "next/navigation";
// import { motion } from "framer-motion";
import { Upload, User, Mail, Tag, Save, X } from "lucide-react";
import Avatar from "@/components/Avatar";
import CosmicToast from "@/components/CosmicToast";
import { useProfileStore, UserProfile } from "@/store/profileStore";

export default function ProfileEditPage() {
  const router = useRouter();
  const { profile, updateProfile } = useProfileStore();
  const [localProfile, setLocalProfile] = useState<UserProfile>(profile);
  const [showToast, setShowToast] = useState(false);
  // üí° ‡πÄ‡∏Å‡πá‡∏ö URL ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ cleanup
  const [tempAvatarUrl, setTempAvatarUrl] = useState<string | null>(null);

  // üí° CLEANUP: ‡∏•‡πâ‡∏≤‡∏á URL ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà localProfile.avatarUrl ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  useEffect(() => {
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ tempAvatarUrl ‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà URL ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏¥‡πâ‡∏á
    if (tempAvatarUrl && tempAvatarUrl !== localProfile.avatarUrl) {
      URL.revokeObjectURL(tempAvatarUrl);
      setTempAvatarUrl(null); // ‡∏•‡πâ‡∏≤‡∏á state tempAvatarUrl
    }
  }, [localProfile.avatarUrl, tempAvatarUrl]);

  // üí° CLEANUP: ‡∏•‡πâ‡∏≤‡∏á URL ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏ñ‡∏π‡∏Å‡∏ñ‡∏≠‡∏î‡∏≠‡∏≠‡∏Å
  useEffect(() => {
    return () => {
      if (tempAvatarUrl) {
        URL.revokeObjectURL(tempAvatarUrl);
      }
    };
  }, [tempAvatarUrl]); // ‡πÉ‡∏ä‡πâ tempAvatarUrl ‡πÉ‡∏ô dependency array ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setLocalProfile((prev) => ({ ...prev, [name]: value }));
  };

  const handleAvatarChange: React.ChangeEventHandler<HTMLInputElement> = (
    e
  ) => {
    const file = e.target.files?.[0];
    if (!file) return;

    const newAvatarUrl = URL.createObjectURL(file);
    
    // üí° ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ localProfile ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
    setLocalProfile((prev) => ({ ...prev, avatarUrl: newAvatarUrl }));
    // üí° ‡πÄ‡∏Å‡πá‡∏ö URL ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏ß‡πâ‡πÉ‡∏ô state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cleanup ‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    setTempAvatarUrl(newAvatarUrl); 

    // **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á URL ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
    // ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ callback form ‡∏Ç‡∏≠‡∏á setLocalProfile ‡πÅ‡∏•‡∏∞ setTempAvatarUrl 
    // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á URL ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞ set URL ‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ useEffect 
    // ‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÉ‡∏ô React
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    updateProfile(localProfile); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï store ‡∏ï‡∏≠‡∏ô submit
    setShowToast(true);
    // üí° ‡∏´‡∏≤‡∏Å URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô store ‡∏Ñ‡∏∑‡∏≠ URL ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (Object URL) 
    // ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏ó‡∏ô ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞ push ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô
    setTimeout(() => router.push("/profile"), 1500);
  };

  const handleCancel = () => router.push("/profile");

  return (
    <main className="min-h-screen bg-white px-6 py-8">
      {showToast && (
        <CosmicToast
          message="Profile Updated!"
          type="success"
          duration={1500}
          onClose={() => setShowToast(false)}
        />
      )}

      <form
        onSubmit={handleSubmit}
        className="max-w-xl mx-auto p-8 rounded-3xl bg-gray-50 border border-gray-200 shadow-xl space-y-6"
      >
        {/* Avatar */}
        <div className="flex flex-col items-center">
          <Avatar
            name={localProfile.name}
            size={96}
            avatarUrl={localProfile.avatarUrl}
          />
          <label className="mt-4 px-4 py-2 text-sm font-semibold rounded-lg text-white bg-gray-900 cursor-pointer hover:bg-black transition flex items-center">
            <input
              type="file"
              className="hidden"
              accept="image/*"
              onChange={handleAvatarChange}
            />
            <Upload size={16} className="mr-2" /> Upload Avatar
          </label>
        </div>

        {/* Name */}
        <div>
          <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
            <User size={16} className="mr-2" /> Username
          </label>
          <input
            title="Name"
            type="text"
            name="name"
            value={localProfile.name}
            onChange={handleChange}
            className="w-full p-3 rounded-lg border border-gray-300"
          />
        </div>

        {/* Email */}
        <div>
          <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
            <Mail size={16} className="mr-2" /> Email
          </label>
          <input
            title="Email"
            type="email"
            name="email"
            value={localProfile.email}
            onChange={handleChange}
            className="w-full p-3 rounded-lg border border-gray-300"
          />
        </div>

        {/* Tagline */}
        <div>
          <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
            <Tag size={16} className="mr-2" /> Bio / Tagline
          </label>
          <textarea
            title="Bio"
            name="tagline"
            value={localProfile.tagline}
            onChange={handleChange}
            rows={3}
            className="w-full p-3 rounded-lg border border-gray-300"
          />
        </div>

        {/* Buttons */}
        <div className="flex justify-between mt-4">
          <button
            type="button"
            onClick={handleCancel}
            className="px-6 py-3 bg-white border rounded-xl"
          >
            <X size={20} className="inline mr-2" /> Cancel
          </button>
          <button
            type="submit"
            className="px-6 py-3 bg-gray-900 text-white rounded-xl"
          >
            <Save size={20} className="inline mr-2" /> Save
          </button>
        </div>
      </form>
    </main>
  );
}