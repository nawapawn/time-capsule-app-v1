// src/app/profile/edit/page.tsx
"use client";

import React, { useState, useEffect } from "react"; // üí° useState ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö local state, useEffect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cleanup
import { useRouter } from "next/navigation"; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö redirect ‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô
import { Upload, User, Mail, Tag, Save, X } from "lucide-react"; // icons
import Avatar from "@/components/Avatar"; // component avatar
import CosmicToast from "@/components/CosmicToast"; // toast popup
import { useProfileStore, UserProfile } from "@/store/profileStore"; // store ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö profile

export default function ProfileEditPage() {
  const router = useRouter();
  const { profile, updateProfile } = useProfileStore(); // ‡∏î‡∏∂‡∏á profile ‡∏à‡∏≤‡∏Å store
  const [localProfile, setLocalProfile] = useState<UserProfile>(profile); // state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö edit
  const [showToast, setShowToast] = useState(false); // toast popup state
  const [tempAvatarUrl, setTempAvatarUrl] = useState<string | null>(null); // üí° ‡πÄ‡∏Å‡πá‡∏ö URL ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á avatar

  // ==============================
  // Cleanup URL ‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏≠‡∏á avatar
  // ==============================
  useEffect(() => {
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ URL ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏Å‡πà‡∏≤ ‡πÅ‡∏•‡∏∞‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà avatar ‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á
    if (tempAvatarUrl && tempAvatarUrl !== localProfile.avatarUrl) {
      URL.revokeObjectURL(tempAvatarUrl);
      setTempAvatarUrl(null);
    }
  }, [localProfile.avatarUrl, tempAvatarUrl]);

  // cleanup ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏ñ‡∏π‡∏Å unmount
  useEffect(() => {
    return () => {
      if (tempAvatarUrl) URL.revokeObjectURL(tempAvatarUrl);
    };
  }, [tempAvatarUrl]);

  // ==============================
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handle input change
  // ==============================
  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setLocalProfile((prev) => ({ ...prev, [name]: value })); // update field ‡∏ï‡∏≤‡∏° name
  };

  // ==============================
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handle avatar upload
  // ==============================
  const handleAvatarChange: React.ChangeEventHandler<HTMLInputElement> = (
    e
  ) => {
    const file = e.target.files?.[0];
    if (!file) return;

    const newAvatarUrl = URL.createObjectURL(file); // üí° ‡∏™‡∏£‡πâ‡∏≤‡∏á object URL ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    setLocalProfile((prev) => ({ ...prev, avatarUrl: newAvatarUrl })); // update avatar ‡πÉ‡∏ô form
    setTempAvatarUrl(newAvatarUrl); // ‡πÄ‡∏Å‡πá‡∏ö URL ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠ cleanup ‡∏£‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏õ
  };

  // ==============================
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô submit form
  // ==============================
  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    updateProfile(localProfile); // ‚úÖ update store
    setShowToast(true); // ‡πÅ‡∏™‡∏î‡∏á toast

    // redirect ‡∏´‡∏•‡∏±‡∏á 1.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    setTimeout(() => router.push("/profile"), 1500);

    // üí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ Object URL ‡∏à‡∏£‡∏¥‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ server ‡∏Å‡πà‡∏≠‡∏ô
    // ‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏≤ URL ‡∏Ç‡∏≠‡∏á server ‡∏°‡∏≤ update ‡πÅ‡∏ó‡∏ô
  };

  // ==============================
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô cancel
  // ==============================
  const handleCancel = () => router.push("/profile");

  // ==============================
  // JSX
  // ==============================
  return (
    <main className="min-h-screen bg-white px-6 py-8">
      {/* Toast */}
      {showToast && (
        <CosmicToast
          message="Profile Updated!"
          type="success"
          duration={1500}
          onClose={() => setShowToast(false)}
        />
      )}

      <form
        onSubmit={handleSubmit}
        className="max-w-xl mx-auto p-8 rounded-3xl bg-gray-50 border border-gray-200 shadow-xl space-y-6"
      >
        {/* Avatar Upload */}
        <div className="flex flex-col items-center">
          <Avatar
            name={localProfile.name}
            size={96}
            avatarUrl={localProfile.avatarUrl}
          />
          <label className="mt-4 px-4 py-2 text-sm font-semibold rounded-lg text-white bg-gray-900 cursor-pointer hover:bg-black transition flex items-center">
            <input
              type="file"
              className="hidden"
              accept="image/*"
              onChange={handleAvatarChange}
            />
            <Upload size={16} className="mr-2" /> Upload Avatar
          </label>
        </div>

        {/* Username */}
        <div>
          <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
            <User size={16} className="mr-2" /> Username
          </label>
          <input
            title="Name"
            type="text"
            name="name"
            value={localProfile.name}
            onChange={handleChange}
            className="w-full p-3 rounded-lg border border-gray-300"
          />
        </div>

        {/* Email */}
        <div>
          <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
            <Mail size={16} className="mr-2" /> Email
          </label>
          <input
            title="Email"
            type="email"
            name="email"
            value={localProfile.email}
            onChange={handleChange}
            className="w-full p-3 rounded-lg border border-gray-300"
          />
        </div>

        {/* Tagline */}
        <div>
          <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
            <Tag size={16} className="mr-2" /> Bio / Tagline
          </label>
          <textarea
            title="Bio"
            name="tagline"
            value={localProfile.tagline}
            onChange={handleChange}
            rows={3}
            className="w-full p-3 rounded-lg border border-gray-300"
          />
        </div>

        {/* Buttons */}
        <div className="flex justify-between mt-4">
          <button
            type="button"
            onClick={handleCancel}
            className="px-6 py-3 bg-white border rounded-xl"
          >
            <X size={20} className="inline mr-2" /> Cancel
          </button>
          <button
            type="submit"
            className="px-6 py-3 bg-gray-900 text-white rounded-xl"
          >
            <Save size={20} className="inline mr-2" /> Save
          </button>
        </div>
      </form>
    </main>
  );
}
